class ClassEsp8266WiFi{constructor(_rx,_tx){if(this.Instance)return this.Instance;ClassEsp8266WiFi.prototype.Instance=this,this.name="ClassEsp8266WiFi",this.wifi=void 0,this.ssid=void 0,this.pass=void 0,this.InitBus(_rx,_tx),this.ScanForAPs(),this.Connect(this.ssid,this.pass)}InitBus(_rx,_tx){let bus_class=new UARTBus,opt={rx:_rx,tx:_tx,baud:115200};this.bus=bus_class.AddBus(opt)}ScanForAPs(){let wifi;wifi=require("https://raw.githubusercontent.com/AlexGlgr/ModuleMiddleWIFIesp8266/fork-Alexander/js/module/ClassBaseWIFIesp8266.min.js").setup(Serial3,(function(err){err&&console.log("Module connection error! "+err),wifi.getAPs((function(err,aps){if(err)console.log("Error looking for APs: "+err);else{let found=aps.map(a=>a.ssid),wrt=require("Storage").readJSON("APs.json",!0),i=0,j=0;for(;i<wrt.length;i++)for(;j<found.length;j++)if(found[j]==wrt[i].ssid){this.ssid=wrt[i].ssid,this.pass=wrt[i].pass;break}}}))}))}Connect(_ssid,_pass){let wifi=require("https://raw.githubusercontent.com/AlexGlgr/ModuleMiddleWIFIesp8266/fork-Alexander/js/module/ClassBaseWIFIesp8266.min.js").setup(Serial3,(function(err){err&&console.log("Module connection error! "+err),wifi.connect(_ssid,_pass,(function(err){err?console.log(_ssid+" "+_pass+"\nConnection failed! "+err):(console.log("Connected!"),wifi.getIP((function(emsg,ipAdress){if(emsg)throw new err(emsg,this.ecode);console.log(ipAdress)})))}))}));this.wifi=wifi,this.AddToList()}AddToList(){let i=0,flag=!1,wrt=require("Storage").readJSON("APs.json",!0);for(;i<wrt.length;i++)if(this.ssid==wrt[i].ssid){flag=!0;break}flag||(wrt.push({ssid:this.ssid,pass:this.pass}),require("Storage").writeJSON("APs.json",wrt))}GetIP(){let _ip;return this.wifi.getIP((function(emsg,ipAdress){if(emsg)throw new err(emsg,this.ecode);_ip=ipAdress})),_ip}GetAPs(){let _aps;return this.wifi.getAPs((function(emsg,aps){if(emsg)throw new err(emsg,this.ecode);_aps=aps})),console.log(_aps),_aps}GetVersion(){let _ver;return this.wifi.getVersion((function(emsg,version){if(emsg)throw new err(emsg,this.ecode);_ver=version})),_ver}CreateAP(_ssid,_pass,_chan,_enc){let _res="AP created";return this.wifi.createAP(_ssid,_pass,_chan,_enc,(function(emsg){if(emsg)throw new err(emsg,this.ecode)})),_res}GetConnectedDevices(){let _devs;return this.wifi.getConnectedDevices((function(emsg,devices){if(emsg)throw new err(emsg,this.ecode);_devs=devices})),_devs}}exports=ClassEsp8266WiFi;