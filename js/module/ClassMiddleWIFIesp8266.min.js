class ClassEsp8266WiFi{constructor(_Bus,ssid,pass){if(this.Instance)return this.Instance;ClassEsp8266WiFi.prototype.Instance=this,this.name="ClassEsp8266WiFi",this.wifi=void 0,this.ssid=ssid,this.pass=pass,this.ecode=12,this.Init(_Bus)}Init(_Bus){this.wifi=require("https://raw.githubusercontent.com/AlexGlgr/ModuleMiddleWIFIesp8266/fork-Alexander/js/module/ClassBaseWIFIesp8266.min.js").setup(_Bus,(function(err){err&&console.log("Module connection error! "+err),null!=this.ssid&&null!=this.pass?this.Connect(this.ssid,this.pass):this.wifi.getAPs((function(err,aps){if(err)console.log("Error looking for APs: "+err);else{let found=aps.map(a=>a.ssid),wrt=require("Storage").readJSON("APs.json",!0),i=0,j=0;for(;i<wrt.length;i++)for(;j<found.length;j++)if(found[j]==wrt[i].ssid){this.Connect(wrt[i].ssid,wrt[i].pass);break}}}))}))}Connect(_ssid,_pass){let _scs="Conncetion successful";return this.wifi.connect(_ssid,_pass,(function(emsg){if(emsg)throw new err(emsg,this.ecode)})),_scs}GetIP(){let _ip;return this.wifi.getIP((function(emsg,ipAdress){if(emsg)throw new err(emsg,this.ecode);_ip=ipAdress})),_ip}GetAPs(){let _aps;return this.wifi.getAPs((function(emsg,aps){if(emsg)throw new err(emsg,this.ecode);_aps=aps})),console.log(_aps),_aps}GetVersion(){let _ver;return this.wifi.getVersion((function(emsg,version){if(emsg)throw new err(emsg,this.ecode);_ver=version})),_ver}CreateAP(_ssid,_pass,_chan,_enc){let _res="AP created";return this.wifi.createAP(_ssid,_pass,_chan,_enc,(function(emsg){if(emsg)throw new err(emsg,this.ecode)})),_res}GetConnectedDevices(){let _devs;return this.wifi.getConnectedDevices((function(emsg,devices){if(emsg)throw new err(emsg,this.ecode);_devs=devices})),_devs}}exports=ClassEsp8266WiFi;