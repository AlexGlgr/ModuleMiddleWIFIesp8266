class ClassWSServer{constructor(){if(this.Instance)return this.Instance;ClassWSServer.prototype.Instance=this,this.name="ClassWSServer",this.server=void 0,this.proxy=new ProxyWS(this),this.port=8080,this.clients=[],this.Init()}Init(){let page="<html><body>404 - Not supported format</body></html>";function pageHandler(req,res){res.writeHead(404,{"Content-Type":"text/html"}),res.end(page)}function wsHandler(ws){console.log("Connection established!\nKey: "+ws.key.hashed),this.clients.push(ws),console.log(ws),ws.on("message",message=>{console.log("Receiving message: "+message),this.proxy.Receive(message,ws.key.hashed)}),ws.on("close",()=>{let index=this.clients.indexOf(ws);this.clients.splice(index,1),this.proxy.RemoveSub(ws.key.hashed),console.log("Closed "+ws.key.hashed)})}this.server=require("ws").createServer(pageHandler),this.server.listen(8080),console.log("Starting server"),this.server.on("websocket",wsHandler.bind(this))}Notify(data,keys){this.clients.filter(client=>keys.includes(client.key.hashed)).forEach(client=>{client.send(data)})}InvCallback(_cb){let res;switch(_cb){case"open":this.wsc.on("open",(function(){res="Connected to server"}));break;case"message":this.wsc.on("message",(function(msg){res="MSG: "+msg}));break;case"close":this.wsc.on("close",(function(){res="Connection closed"}));break;case"handshake":this.wsc.on("handshake",(function(){res="Handshake success!"}));break;case"ping":this.wsc.on("ping",(function(){res="Got a ping!"}));break;case"pong":this.wsc.on("pong",(function(){res="Got a pong!"}));break;case"rawData":this.wsc.on("rawData",(function(msg){res="Raw Data: "+msg}));break;default:res="Unknown command!"}return res}}exports=ClassWSServer;