class ClassWSServer{constructor(){if(this.Instance)return this.Instance;ClassWSServer.prototype.Instance=this,this.name="ClassWSServer",this.server=void 0,this.proxy=new ProxyWS(this),this.port=8e3,this.clients=[],this.Init()}Init(){this.server=require("ws").createServer((req,res)=>{res.writeHead(200,{"Content-Type":"text/html"}),res.end("")}),this.server.listen(this.port),console.log("Listen to "+this.port),this.server.on("websocket",req=>{console.log(req);const connection=req.accept("",req.origin);connection.key=req.headers["sec-websocket-key"],this.clients.push(connection),console.log("Connected "+connection.remoteAdress),connection.on("message",message=>{const dataName=message.type+"Data",data=message[dataName];this.proxy.Receive(data,connection.key)}),connection.on("close",(rCode,desc)=>{let index=this.clients.indexOf(connection);this.clients.splice(index,1),this.proxy.RemoveSub(connection.key),console.log("Disconnected "+connection.remoteAddress)})})}Notify(data,keys){this.clients.filter(client=>keys.includes(client.key)).forEach(client=>{client.send(data)})}InvCallback(_cb){let res;switch(_cb){case"open":this.wsc.on("open",(function(){res="Connected to server"}));break;case"message":this.wsc.on("message",(function(msg){res="MSG: "+msg}));break;case"close":this.wsc.on("close",(function(){res="Connection closed"}));break;case"handshake":this.wsc.on("handshake",(function(){res="Handshake success!"}));break;case"ping":this.wsc.on("ping",(function(){res="Got a ping!"}));break;case"pong":this.wsc.on("pong",(function(){res="Got a pong!"}));break;case"rawData":this.wsc.on("rawData",(function(msg){res="Raw Data: "+msg}));break;default:res="Unknown command!"}return res}}exports=ClassWSServer;