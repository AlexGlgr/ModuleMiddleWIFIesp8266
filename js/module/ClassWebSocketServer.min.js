class ClassWSServer{constructor(){if(this.Instance)return this.Instance;ClassWSServer.prototype.Instance=this,this.name="ClassWSServer",this.server=void 0,this.proxy=void 0,this.port=void 0,this.clients=[],this.Init()}Init(){this.server=require("ws").createServer((req,res)=>{res.writeHead(200,{"Content-Type":"text/html"}),res.end("")}),null==this.port&&(this.port=8e3),this.server.listen(this.port,()=>{console.log("Listen to port "+this.port)}),this.server.on("request",req=>{const connection=req.accept("",req.origin);this.clients.push(connection),console.log("Connected "+connection.remoteAdress),connection.on("message",message=>{const dataName=message.type+"Data",data=message[dataName];let type=this.proxy.defType();console.log("Recieved: "+data),this.clients.forEach(client=>{connection!==client.connection&&client.connection.send(data)})}),connection.on("close",(rCode,desc)=>{let index=this.clients.indexOf(connection);this.clients.splice(index,1),console.log("Disconnected "+connection.remoteAddress)})})}InvCallback(_cb){let res;switch(_cb){case"open":this.wsc.on("open",(function(){res="Connected to server"}));break;case"message":this.wsc.on("message",(function(msg){res="MSG: "+msg}));break;case"close":this.wsc.on("close",(function(){res="Connection closed"}));break;case"handshake":this.wsc.on("handshake",(function(){res="Handshake success!"}));break;case"ping":this.wsc.on("ping",(function(){res="Got a ping!"}));break;case"pong":this.wsc.on("pong",(function(){res="Got a pong!"}));break;case"rawData":this.wsc.on("rawData",(function(msg){res="Raw Data: "+msg}));break;default:res="Unknown command!"}return res}}exports=ClassWSServer;