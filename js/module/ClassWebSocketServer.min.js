class ClassWSServer{constructor(){if(this.Instance)return this.Instance;ClassWSServer.prototype.Instance=this,this.name="ClassWSServer",this.server=void 0,this.proxy=new ProxyWS(this),this.port=8e3,this.clients=[],this.Init()}Init(){var page="<html><body><script>var ws;setTimeout(function(){";function onPageRequest(req,res){res.writeHead(200,{"Content-Type":"text/html"}),res.end(page)}page+='ws = new WebSocket("ws://" + location.host + "/my_websocket", "protocolOne");',page+='ws.onmessage = function (event) { console.log("MSG:"+event.data); };',page+='setTimeout(function() { ws.send("Hello to Espruino!"); }, 1000);',page+="},1000);<\/script></body></html>",console.log("Wubbalubba"),this.server=require("ws").createServer(onPageRequest),this.server.listen(8e3),this.server.on("websocket",(function(ws){ws.on("message",(function(msg){print("[WS] "+JSON.stringify(msg))})),ws.send("Hello from Espruino!")}))}Notify(data,keys){this.clients.filter(client=>keys.includes(client.key)).forEach(client=>{client.send(data)})}InvCallback(_cb){let res;switch(_cb){case"open":this.wsc.on("open",(function(){res="Connected to server"}));break;case"message":this.wsc.on("message",(function(msg){res="MSG: "+msg}));break;case"close":this.wsc.on("close",(function(){res="Connection closed"}));break;case"handshake":this.wsc.on("handshake",(function(){res="Handshake success!"}));break;case"ping":this.wsc.on("ping",(function(){res="Got a ping!"}));break;case"pong":this.wsc.on("pong",(function(){res="Got a pong!"}));break;case"rawData":this.wsc.on("rawData",(function(msg){res="Raw Data: "+msg}));break;default:res="Unknown command!"}return res}}exports=ClassWSServer;